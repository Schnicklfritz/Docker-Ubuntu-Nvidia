mkdir -p .github/workflows
cat > .github/workflows/publish.yml << 'EOF'
name: Build and Publish

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  IMAGE_NAME: cuda-minimal
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        id: build-push
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:latest,
            ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{
              github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Image
        run: |
          IMAGE=${{ steps.build-push.outputs.image }}
          docker run --rm $IMAGE ls /usr/local/bin/entrypoint.sh
          docker run --rm $IMAGE python3 -c "import sys; print('Python
            ready:', sys.version)"
          docker run --rm $IMAGE chromium-browser --headless
            --no-sandbox --version

  dockerhub-mirror:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ secrets.DOCKERHUB_TOKEN != '' }}
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Copy Images
        run: |
          for tag in latest ${{ github.sha }}; do
            docker pull ${{ env.REGISTRY }}/${{ env.OWNER }}/${{
              env.IMAGE_NAME }}:$tag
            docker tag ${{ env.REGISTRY }}/${{ env.OWNER }}/${{
              env.IMAGE_NAME }}:$tag ${{ secrets.DOCKERHUB_USERNAME }}/${{
              env.IMAGE_NAME }}:$tag
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{
              env.IMAGE_NAME }}:$tag
          done
EOF
